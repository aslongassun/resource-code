package com.vmcop.simplethird.findlover;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.Profile;
import com.facebook.appevents.AppEventsLogger;
import com.facebook.login.LoginManager;
import com.facebook.login.LoginResult;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.DateTime;
import com.squareup.picasso.Picasso;
import com.vmcop.simplethird.findlover.constant.ConstantValue;
import com.vmcop.simplethird.findlover.profileinfoendpoint.Profileinfoendpoint;
import com.vmcop.simplethird.findlover.profileinfoendpoint.model.CollectionResponseProfileInfo;
import com.vmcop.simplethird.findlover.profileinfoendpoint.model.ProfileInfo;


public class MainActivity extends Activity {

    private static final String TAG = "=LOG=";

    CallbackManager mCallbackManager;

    List<String> permissionNeeds= Arrays.asList("user_birthday", "user_friends", "public_profile");

    JSONObject jsonReturn;
    
	ProfileInfo profileInfo;
	
	List<ProfileInfo> listProfileInfo;
	
	Integer loverIndex;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        initData();

        FacebookSdk.sdkInitialize(getApplicationContext());

        setContentView(R.layout.activity_main);

        mCallbackManager  = CallbackManager.Factory.create();

        LoginManager.getInstance().logInWithReadPermissions(this, permissionNeeds);

        LoginManager.getInstance().registerCallback(mCallbackManager, new FacebookCallback<LoginResult>() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                doAfterLoginSuccess(loginResult);
            }

            @Override
            public void onCancel() {
                showDialog();
            }

            @Override
            public void onError(FacebookException exception) {
                Toast.makeText(getApplicationContext(), "onError", Toast.LENGTH_SHORT).show();
                showDialog();
            }
        });

        // Click on Button Find
        final Button button = (Button) findViewById(R.id.btnFind);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                findLoveAction();
            }
        });
        
        
    }

    private void initData(){
        jsonReturn = new JSONObject();
        profileInfo = new ProfileInfo();
        listProfileInfo = new ArrayList<ProfileInfo>();
    }
    //===========2015/06/04 VMCop=========//

    private void showDialog(){
        Log.d(TAG, "showDialog!");
        // show a dialog notice no image found
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("Connection error");
        builder.setMessage("Check your internet connection and try again.");
        builder.setPositiveButton("Try again",	new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                LoginManager.getInstance().logInWithReadPermissions(MainActivity.this, permissionNeeds);
            }
        });
        AlertDialog dialog = builder.create();
        dialog.show();
    }

    // Thuc hien xu ly sau khi login thanh cong
    private void doAfterLoginSuccess(LoginResult loginResult){
        Log.d(TAG, "Login Success!");
        
        Profile currProfile = Profile.getCurrentProfile();
        // Set Image vao ImageView ImageView yourImageView = (ImageView)findViewById(R.id.You);
        setImageProfileForImageView(buildImageProfileUrlFromUID(currProfile.getId()),(ImageView)findViewById(R.id.You));
        
        // Click on Imageview
        final ImageView imageViewYou = (ImageView) findViewById(R.id.You);
        imageViewYou.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	Log.d(TAG, "show url");
            	Uri uri = Uri.parse("https://facebook.com/" + Profile.getCurrentProfile().getId());
                startActivity(new Intent(Intent.ACTION_VIEW, uri));
            }
        });
        
        requestGraphData(loginResult);
    }

    // Set Image get tu Url vao ImageView
    private void setImageProfileForImageView(String imageUrl, ImageView inImageView){
        Picasso.with(MainActivity.this).load(imageUrl).into(inImageView);
    }

    // Lay ve nhung thong tin can thiet cua user login
    private void requestGraphData(LoginResult loginResult){
    	Log.d(TAG, "requestGraphData");
        GraphRequest request = GraphRequest.newMeRequest(
                loginResult.getAccessToken(),
                new GraphRequest.GraphJSONObjectCallback() {
                    @Override
                    public void onCompleted(
                            JSONObject object,
                            GraphResponse response) {
                        Log.d(TAG, "object:" + object.toString());
                        //----------TODO----------//
                        /*
                        // Save xuong data cua may
                        SharedPreferences mySharedPreferencesInfo = getSharedPreferences(ConstantValue.PREFS_NAME, 0);
                        SharedPreferences.Editor editor = mySharedPreferencesInfo.edit();

                        editor.putString(ConstantValue.MY_PROFILE_ID,object.optString(ConstantValue.MY_PROFILE_ID));
                        editor.putString(ConstantValue.MY_NAME,object.optString(ConstantValue.MY_NAME));
                        editor.putString(ConstantValue.MY_SEX,object.optString(ConstantValue.MY_SEX));
                        editor.putString(ConstantValue.MY_BIRTHDAY,object.optString(ConstantValue.MY_BIRTHDAY));
                        editor.putInt(ConstantValue.MY_AGE, calculateAgeFromBirthDay(object.optString(ConstantValue.MY_BIRTHDAY)));
                        // currProfile.getProfilePictureUri(500, 500).toString()
                        
                        editor.commit();
                        */

                        // Facebook ID only for app
                        profileInfo.setFuid(object.optString(ConstantValue.MY_PROFILE_ID));
                        // Facebook Name
                        profileInfo.setUserName(object.optString(ConstantValue.MY_NAME));
                        // Facebook Sex - Male/Female
                        profileInfo.setUserSex(object.optString(ConstantValue.MY_SEX));
                        // Birthday
                        String birthDayStr = object.optString(ConstantValue.MY_BIRTHDAY);
                        String[] dateBirthArr = birthDayStr.split("/");
                        profileInfo.setBirthday(birthDayStr);
                        if(dateBirthArr.length > 2){
                        	// Facebook Born year
                        	profileInfo.setBornYear(Integer.parseInt(dateBirthArr[2]));
                        }
                        // Facebook Image Profile
                        profileInfo.setUrlImageProfile(buildImageProfileUrlFromUID(object.optString(ConstantValue.MY_PROFILE_ID)));
                        // User Local
                        profileInfo.setLocale(ConstantValue.LOCAL_VIETNAM);
                        //------------------------//
                        new ProfileInfoTask().execute();
                        //------------------------//
                        
                    }
                }
        );
        Bundle parameters = new Bundle();
        parameters.putString("fields", "id,name,gender,birthday");
        request.setParameters(parameters);
        request.executeAsync();
    }
    
    private Date partStringToDate(String inStr){
    	try {
    		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
			Date date = formatter.parse(inStr);
			Log.d(TAG, "date part:" + date);
			return date;
		} catch (ParseException e) {
			Log.d(TAG, "exception:" + e.getMessage());
			// e.printStackTrace();
			return Calendar.getInstance().getTime();
		}
    }
    
    private String buildImageProfileUrlFromUID(String inUID){
    	if(inUID == null || inUID == ""){
    		showErrorMessage("inUID is Blank!");
    		return "";
    	}
    	String resultUrl = "https://graph.facebook.com/"+ inUID +"/picture?type=large&width=250&height=250";
    	return resultUrl;
    }
    
    private void showErrorMessage(String inMessage){
    	Log.d(TAG, "Message_Error:" + inMessage);
    }
    
    /*
    // Tinh toan tuoi tu ngay sinh
    private int calculateAgeFromBirthDay(String inBirthDay){
        int age = 0;
        try {
            age = Calendar.getInstance().get(Calendar.YEAR) - Integer.parseInt(inBirthDay.split("/")[2]);
        }catch(Exception ex){
            Log.d(TAG, "calculateAgeFromBirthDay:" + ex.getMessage());
        }
        return age;
    }*/

    // Tim kiem nguoi yeu dua vao cac thong tin san co
    private void findLoveAction(){
        Log.d(TAG, "Find Love!");
        // Tim kiem nguoi thich hop
        //SharedPreferences mySharedPreferencesInfo = getSharedPreferences(ConstantValue.PREFS_NAME, 0);
        //Log.d(TAG, "Age getted:" + mySharedPreferencesInfo.getString(ConstantValue.MY_PROFILE_ID, ""));
        //Log.d(TAG, "Age getted:" + mySharedPreferencesInfo.getInt(ConstantValue.MY_AGE, 0));
        // Thiet lap cac thong tin tren man hinh
        
        // Thuc hien tiep action sau khi ham ben duoi thanh cong
        new ListOfProfileInfoAsyncRetriever().execute();
    }
    
    /**
     * AsyncTask for calling Mobile Assistant API for checking into a place (e.g., a store)
    */
    private class ProfileInfoTask extends AsyncTask<Void, Void, Void> {

      /**
       * Calls appropriate CloudEndpoint to indicate that user checked into a place.
       *
       * @param params the place where the user is checking in.
       */
      @Override
      protected Void doInBackground(Void... params) {
        
    	Profileinfoendpoint.Builder builder = new Profileinfoendpoint.Builder(
            AndroidHttp.newCompatibleTransport(), new JacksonFactory(),
            null);
            
        builder = CloudEndpointUtils.updateBuilder(builder);

        Profileinfoendpoint endpoint = builder.build();
        

        try {
        	endpoint.insertProfileInfo(profileInfo).execute();
        } catch (IOException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }

        return null;
      }
    }
    
    /**
     * AsyncTask for retrieving the list of places (e.g., stores) and updating the
     * corresponding results list.
     */
    private class ListOfProfileInfoAsyncRetriever extends AsyncTask<Void, Void, CollectionResponseProfileInfo> {

      @Override
      protected CollectionResponseProfileInfo doInBackground(Void... params) {


    	Profileinfoendpoint.Builder endpointBuilder = new Profileinfoendpoint.Builder(
            AndroidHttp.newCompatibleTransport(), new JacksonFactory(), null);
       
        endpointBuilder = CloudEndpointUtils.updateBuilder(endpointBuilder);


        CollectionResponseProfileInfo result;

        Profileinfoendpoint endpoint = endpointBuilder.build();

        try {
          result = endpoint.listProfileInfo().execute();
        } catch (IOException e) {
          Log.d(TAG, "IOException:" + e.getMessage());
          // TODO Auto-generated catch block
          e.printStackTrace();
          result = null;
        }
        return result;
      }
      
      // If you want the UI to wait until the task returns, use a ProgressDialog in the onPreExecute and onPostExecute methods.
      @Override
      protected void onPostExecute(CollectionResponseProfileInfo result) {
    	  if(result == null){
    		  Log.d(TAG, "==List data from server is null==");
    		  return;
    	  }
    	  listProfileInfo = result.getItems();
    	  matchLove();
      }
      
    }
    
    private void matchLove(){
    	loverIndex = 0;
    	for(Integer i = 0; i < listProfileInfo.size(); i++){
    		if(listProfileInfo.get(i).getUserSex().equalsIgnoreCase("female")){
    			loverIndex = i;
    			break;
    		}
    	}
    	setImageProfileForImageView(listProfileInfo.get(loverIndex).getUrlImageProfile(),(ImageView)findViewById(R.id.Love));
    	// Click on Imageview
        final ImageView imageViewYou = (ImageView) findViewById(R.id.Love);
        imageViewYou.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	Log.d(TAG, "show url");
            	Uri uri = Uri.parse("https://facebook.com/" + listProfileInfo.get(loverIndex).getFuid());
                startActivity(new Intent(Intent.ACTION_VIEW, uri));
            }
        });
    }
    
    //====================================//

    @Override
    protected void onResume() {
        super.onResume();
        AppEventsLogger.activateApp(this);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mCallbackManager.onActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onPause() {
        super.onPause();
        AppEventsLogger.deactivateApp(this);
    }

}
